#    the `sapply()` and `lapply()` functions.) (Variable: `state_summary`)
sapply(uniq_states, count_in_location)
# 3l: Create a summary table by passing your `states` variable to the
#    `table()` function and by storing the result in the variable `state_table`.
state_table <- table(states)
#
#    *SUGGESTION:* Use the View() function to more easily examine the table. (Variable: `state_table`)
View(state_table)
# 3m: What was the maximum number of protests in a state? (Hint: Use the
#    `state_table` variable.) (Variable: `max_in_state`)
max_in_state <- max(state_table)
# 4a: Extract the `Date` column into a variable called `dates` by passing the
#    column to the `as.Date()` function. (Note: The `as.Date()` function will
#    process the values as dates, which are *fortunately* already in an optimal
#    format for parsing.) (Variable: `dates`)
dates <- as.Date(protests$Date)
# 4b: What is the most recent date in the dataset? (Variable: `most_recent`)
most_recent <- max(dates)
# 4c: What is the earliest date in the dataset? (Variable: `earliest`)
earliest <- min(dates)
# 4d: What is the length of the time span of the dataset? (Hint: R can do math with
#    dates pretty well by default!) (Variable: `time_span`)
time_span <- most_recent - earliest
# 4e: Create a vector of the dates that are in 2020. (Variable: `in_2020`)
in_2020 <- dates[dates >= "2020-01-01" & dates <= "2020-12-31"]
# 4f: Create a vector of the dates that are in 2019. (Variable: `in_2019`)
in_2019 <- dates[dates >= "2019-01-01" & dates <= "2019-12-31"]
# 4g: What is the ratio of the number of protests in 2020 compared to 2019? (Variable: `ratio_2020_2019`)
ratio_2020_2019 <- length(in_2020) / length(in_2019)
# 4h: Write a function `count_on_date()` that accepts the parameter `date`,
#    and returns the sentence:
#       "There were N protests on DATE." - where
#           N is the number of protests on that date; and
#           DATE is the date provided. (Variable: `count_on_date`)
count_on_date <- function(date) {
return(paste0("There were ", sum(str_detect(dates, date)), " protests on ", date, "."))
}
# 4i: Using your function you just wrote, how many protests were there on
#    May 24th, 2020? (Variable: `num_on_may_24`)
num_on_may_24 <- count_on_date("2020-05-24")
# 4j: Using your function you just wrote, how many protests were there on
#    May 31th, 2020? (Variable: `num_on_may_31`)
num_on_may_31 <- count_on_date("2020-05-31")
# 4k: How many protests occurred each month in 2020? (Hint: Use the `months()`
#    function, your `in_2020` dates, and the `table()` function. If you like, you
#    can do this in multiple steps.) (Variable: `by_month_table`)
by_month_table <- table(months(in_2020))
# 4l: As a comparison, let's assess the change between July 2019 and July 2020.
#    What is the *difference* in the number of protests between July 2020 and
#    July 2019? You'll want to do this in multiple steps as you see fit, though
#    your answer should be stored in the variable. (Variable: `change_july_protests`)
table_2019 <- table(months(in_2019))
change_july_protests <- by_month_table["July"] - table_2019["July"]
# 5a: Extract the `Event..legacy..see.tags.` column into a variable called `purpose`.
#
#    *CONSIDER:* The name of this column, "Event..legacy..see.tags.", is very odd. Why?
#    What can be learned from this column name? (Variable: `purpose`)
purpose <- protests$Event..legacy..see.tags.
# 5b: How many different purposes are listed in the dataset? (Variable: `num_purposes`)
num_purposes <- unique(purpose)
# 5c: That's quite a few! Why are there so many purposes? Type `print(purpose)` to
#    examine the values in the vector. You will notice a common pattern. Here, for
#    example, are the first six elements:
#         [1] "Healthcare"
#         [2] "Civil Rights"
#         [3] "Environment"
#         [4] "Other (Martin Luther King Jr.)"
#         [5] "Healthcare (Pro-Planned Parenthood)"
#         [6] "Executive"
print(purpose)
#    (https://stringr.tidyverse.org/). To do so, you will need to write a regular
#    expression that matches " (blah blah)" and replaces it with the empty string (`""`).
#    Note: The space before the left parenthesis needs to be matched too.
#
#    Write a function, `get_purposes()`, that returns a vector of high-level
#    purposes. Your function will take no parameters.
#
#    To solve this problem, you might do a web search and/or find an introduction
#    to regular expressions and R. Take your time. You will likely need to do some
#    thoughtful trial and error. (Variable: `get_purposes`)
get_purposes <- function() {
sub(" .*", "", purpose)
}
# 5d: Show that your function, `get_purposes()` works. (Variable: `high_level_purpose`)
high_level_purpose <- get_purposes()
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(unique(get_purposes()))
# 5f: Use the table() function to count the number of protests for each high level purpose. (Variable: `high_level_table`)
high_level_table <- table(high_level_purpose)
#                                         Note 15.
#     *CONSIDER:* Use View() to examine your `high_level_table` variable. What
#     picture does this paint of the U.S.?
View(high_level_table)
format_doc <- function(protest_df, purpose, position_taken=NULL) {
# Heading components
heading1 <- paste("# Protest purpose: ", purpose, "\n")
heading2 <- "\n"
if (!is.null(position_taken)) {
heading2 <- paste("## Position taken: ", position_taken, "\n")
}
# Summary component
num_protests <- format(nrow(protest_df), big.mark=",")
total_attendees <- format(sum(protest_df$Attendees, na.rm=TRUE), big.mark=",")
summary <- paste0("_Summary_\n\n",
"* Number of Protests: ", num_protests, "\n",
"* Total Attendees: ", total_attendees, "\n\n",
"_List of Protests (Attendees)_\n\n")
# List of protests component (Note: Bullet_list is a vector)
bullet_list <- paste0("* ", protest_df$Date, ": ", protest_df$Location,
" [Article](", protest_df$Source, ")", " (_", protest_df$Attendees, "_)\n")
# Collapse the vector into a string
url_str <- paste0(bullet_list, collapse="")
# Paste together each of the report components
md_doc <- paste0(heading1, heading2, summary, url_str)
return(md_doc)
}
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="~/Documents/info201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
# filter_positions() should return a dataframe of the protests that match on `purpose`
# and `position_taken`. If `position_taken` is NULL then all protests that
# match the `purpose` should be returned.
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests, Event..legacy..see.tags. == paste0(purpose, " (", position_taken, ")"))))
}
# This function filters the data into a dataframe and formats
# the data into a markdown document.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_and_report <- function(purpose, position_taken) {
sub_set_protests = data.frame(filter_positions(purpose, position_taken))
format_doc(sub_set_protests, purpose, position_taken)
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
wa <- filter_positions("Racial Injustice", NULL)
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_data <- filter_positions("Racial Injustice", NULL)
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
filtered_data <- filter_positions("Racial Injustice", "Violence")
View(filtered_position_null)
filter_and_report("Racial Injustice", "Violence")
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="~/Documents/INFO201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
filter_and_report("Racial Injustice", "Violence")
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="~/INFO201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
filter_and_report("Racial Injustice", "Violence")
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="/INFO201/reports/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
filter_and_report("Racial Injustice", "Violence")
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="/INFO201/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
filter_and_report("Racial Injustice", "Violence")
# A helper function to write the report to a file
# NOTE: Check and update the filename for your machine
write_report <- function(md_doc, fname="INFO201/report.md") {
output_fn <- file(fname, "w")
writeLines(md_doc, output_fn)
close(output_fn)
}
filter_and_report("Racial Injustice", "Violence")
View(wa)
View(wa)
View(protests)
View(protests)
View(attendees_distribution)
View(log_attendees_distribution)
View(log_attendees_distribution)
# 5b: How many different purposes are listed in the dataset? (Variable: `num_purposes`)
num_purposes <- unique(purpose)
# 5c: That's quite a few! Why are there so many purposes? Type `print(purpose)` to
#    examine the values in the vector. You will notice a common pattern. Here, for
#    example, are the first six elements:
#         [1] "Healthcare"
#         [2] "Civil Rights"
#         [3] "Environment"
#         [4] "Other (Martin Luther King Jr.)"
#         [5] "Healthcare (Pro-Planned Parenthood)"
#         [6] "Executive"
print(purpose)
# 5e: How many "high level" purposes have you identified? (Variable: `num_high_level`)
num_high_level <- length(unique(get_purposes()))
# 5f: Use the table() function to count the number of protests for each high level purpose. (Variable: `high_level_table`)
high_level_table <- table(high_level_purpose)
#                                         Note 15.
#     *CONSIDER:* Use View() to examine your `high_level_table` variable. What
#     picture does this paint of the U.S.?
View(high_level_table)
install.packages(lintr)
install.packages("lintr")
library(lintr)
help("lintr")
lint(analysis.r)
lint(analysis.R)
lint("analysis.R")
source("~/Desktop/INFO201/assignment-02-info201su-andrewchiang3/analysis.R")
linr("analysis.R")
lint("analysis.R")
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests, Event..legacy..see.tags. == paste0(purpose, " (", position_taken, ")"))))
}
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests, Event..legacy..see.tags. == paste0(purpose, " (", position_taken, ")"))))
}
lint("analysis.R")
View(filter_positions)
View(filter_and_report)
View(filter_positions)
View(filter_positions)
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests,
str_detect(Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
filtered_data <- filter_positions("Racial Injustice", "Violence")
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags.,
pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags. ,
pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags.,
pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
return(subset(protests, str_detect(Event..legacy..see.tags.,
pattern = purpose)))
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
# This function filters the data into a dataframe and formats
# the data into a markdown document.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_and_report <- function(purpose, position_taken) {
sub_set_protests = data.frame(filter_positions(purpose, position_taken))
format_doc(sub_set_protests, purpose, position_taken)
}
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(Event..legacy..see.tags.,
pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests,
str_detect(Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
return(subset(protests,
str_detect(Event..legacy..see.tags., pattern = purpose)))
return(subset(protests, str_detect
(Event..legacy..see.tags., pattern = purpose)))
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(
Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
t
filtered_data <- filter_positions("Racial Injustice", "Violence")
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests, str_detect(
Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
return(subset(protests, str_detect(
Event..legacy..see.tags., pattern = purpose)))
#                                         Note 03.
# 1a: Load the `stringr` package, which you will use later.
library(stringr)
# This function filters the positions taken and returns a
# dataframe of purpose to position taken. If position taken
# is invalid, the function returns all protests that match
# the purpose.
# Parameters:
#   purpose: purpose of the protests
#   position_taken: specific position of the protest
filter_positions <- function(purpose, position_taken) {
if (is.null(position_taken)) {
return(subset(protests,
str_detect(Event..legacy..see.tags., pattern = purpose)))
}
return(data.frame(subset(protests,
Event..legacy..see.tags. ==
paste0(purpose, " (", position_taken, ")"))))
}
#                                         Note 18.
# 6c: Demonstrate that your two functions, filter_protests() and
#    and filter_and_report(), work correctly. Comment on your tests.
#    For example, do your functions have limitations? Or, do they
#    work perfectly? If so, how do you know> Do think these two
#    functions are useful? What might you do next if you had more time?
filtered_position_null <- filter_positions("Racial Injustice", NULL)
source("~/Desktop/INFO201/assignment-02-info201su-andrewchiang3/analysis.R")
